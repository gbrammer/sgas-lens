def preprocess():
    """
    Drizzle and align the other bands
    """
    
    # In Prep
    
    import grizli
    import grizli.prep
    
    import os
    
    import glob
    import numpy as np
    import sgas
    
    # Grism exposures
    files=glob.glob('../RAW/id6*_flt.fits')
    visits, filters = grizli.utils.parse_flt_files(files=files, uniquename=True, get_footprint=True)
    
    # Make groups of direct filter and orientation
    
    # Visits:
    # 0 sdssj0851+3331-sgas-d66-1e-345.0-f105w
    # 1 sdssj0851+3331-sgas-d66-1f-345.0-f105w
    # 2 sdssj0851+3331-sgas-d66-2a-351.0-f105w
    # 3 sdssj0851+3331-sgas-d66-2b-351.0-f105w
    # 4 sdssj0851+3331-sgas-d66-2c-351.0-f105w
    # 5 sdssj0851+3331-sgas-d66-2d-351.0-f105w
    # 6 sdssj0851+3331-sgas-d66-1a-345.0-f160w
    # 7 sdssj0851+3331-sgas-d66-1b-345.0-f160w
    # 8 sdssj0851+3331-sgas-d66-1c-345.0-f160w
    # 9 sdssj0851+3331-sgas-d66-1d-345.0-f160w
    # 10 sdssj0851+3331-sgas-d66-2e-351.0-f160w
    # 11 sdssj0851+3331-sgas-d66-2f-351.0-f160w
    # 12 sdssj0851+3331-sgas-d66-1a-345.0-g141
    # 13 sdssj0851+3331-sgas-d66-1b-345.0-g141
    # 14 sdssj0851+3331-sgas-d66-1c-345.0-g141
    # 15 sdssj0851+3331-sgas-d66-1d-345.0-g141
    # 16 sdssj0851+3331-sgas-d66-1e-345.0-g141
    # 17 sdssj0851+3331-sgas-d66-1f-345.0-g141
    # 18 sdssj0851+3331-sgas-d66-2a-351.0-g141
    # 19 sdssj0851+3331-sgas-d66-2b-351.0-g141
    # 20 sdssj0851+3331-sgas-d66-2c-351.0-g141
    # 21 sdssj0851+3331-sgas-d66-2d-351.0-g141
    # 22 sdssj0851+3331-sgas-d66-2e-351.0-g141
    # 23 sdssj0851+3331-sgas-d66-2f-351.0-g141
    
    d_idx = [[0,1], [2,3,4,5], [6,7,8,9], [10,11]]
    g_idx = [[16,17], [18,19,20,21], [12,13,14,15], [22,23]]
    
    label =  ['y','y','h','h']
    
    groups = []
    for i in range(4):     

        filter = visits[d_idx[i][0]]['product'].split('-')[-1]
        orient = visits[d_idx[i][0]]['product'].split('-')[-2]
        
        direct_exposures = []
        grism_exposures = []
        
        for j in range(len(d_idx[i])):
            direct_exposures.extend(visits[d_idx[i][j]]['files'])
            grism_exposures.extend(visits[g_idx[i][j]]['files'])
        
        group = {'grism':
        {'product':'sdssj0851+3331-sgas-{0}-{1}-g141'.format(label[i], orient),
         'files':grism_exposures},
                  'direct':
        {'product':'sdssj0851+3331-sgas-{0}-{1}-{2}'.format(label[i], orient, filter),
         'files':direct_exposures}}
        
        groups.append(group)
                
    # Alignment list, generated by GBr
    radec = os.path.join(sgas.get_data_path(), 'sdssj0851+3331-f160w.radec')
    
    Skip=True
    
    # This main loop does all of the alignment and background subtraction
    for i in range(len(groups)):
        direct = groups[i]['direct']
        grism = groups[i]['grism']
        print(direct['product'], grism['product'])
                
        print('RADEC:', radec)

        if os.path.exists(direct['product']+'_drz_sci.fits') & Skip:
            continue
            
        # (if you want to run just imaging, say from FFs, use "grism={}")
        status = grizli.prep.process_direct_grism_visit(direct=direct,
                                        grism=grism, radec=radec,
                                        skip_direct=False,
                                        align_mag_limits=[14,23])
    
    # Apply persistence masks: 
    #   Download the products from 
    #   https://archive.stsci.edu/prepds/persist/search.php, unpack them 
    #   and put the *persist.fits files in ./Prep/../Persistence/
    for i in range(len(groups)):
        direct = groups[i]['direct']
        grism = groups[i]['grism']
    
        for sub in [grism, direct]:
            for file in sub['files']:
                print(file)
                if os.path.exists('../Persistence/'+file.replace('_flt', '_persist')):
                    grizli.prep.apply_persistence_mask(file,
                            path='../Persistence', dq_value=1024,
                            err_threshold=0.6, grow_mask=3, verbose=True)
        
def make_filter_mosaics():
    """
    Make combined mosaics in each filter, aligned to a common pixel grid
    """
    import glob
    import grizli
    import grizli.prep
    
    ### Make mosaics
    files=glob.glob('*_flt.fits')
    info = grizli.utils.get_flt_info(files)
    imaging_visits = []
    for i, filter in enumerate(['f160w', 'f125w', 'f105w']):
        product = 'sdssj0851+3331-{0}'.format(filter)
        visit_files = list(info['FILE'][info['FILTER'] == filter.upper()])
        imaging_visits.append({'product':product, 'files':visit_files})
        if i > 0:
            imaging_visits[-1]['reference'] = 'sdssj0851+3331-f160w_drz_sci.fits'
            
    # Drizzle them, North-up and with 0.06" pixels
    grizli.prep.drizzle_overlaps(imaging_visits, parse_visits=False, pixfrac=0.8, scale=0.06, skysub=False, final_wht_type='IVM', check_overlaps=False)
    
    # Make SExtractor catalog
    extra = {'BACK_TYPE':'MANUAL', 'BACK_VALUE':0.0, 'FILTER_NAME': os.path.join(sgas.get_data_path(), 'gauss_4.0_7x7.conv')}
    
    cat = grizli.prep.make_drz_catalog('sdssj0851+3331-f160w', threshold=1.8, get_background=False, extra_config=extra)
    
def static_grism_model():
    
    import glob
    import drizzlepac # to avoid memory issues with GroupFLT...
    
    import grizli
    import grizli.prep
    
    # Find the grism exposures
    files=glob.glob('*_flt.fits')
    info = grizli.utils.get_flt_info(files)
    grism_files = list(info['FILE'][info['FILTER'] == 'G141'])
    
    # Initialize GroupFLT object
    grp = grizli.multifit.GroupFLT(grism_files=grism_files,
                                   direct_files=[], 
                                 ref_file='sdssj0851+3331-f160w_drz_sci.fits',
                                   seg_file='sdssj0851+3331-f160w_seg.fits',
                                   catalog='sdssj0851+3331-f160w.cat',
                                   cpu_count=4)
    
    # First-pass flat spectrum model
    grp.compute_full_model(fit_info=None, verbose=True, store=False, mag_limit=25, coeffs=[1.1, -0.5], cpu_count=4)
    
    # Refine model of bright galaxies
    ds9 = None
    for iter in range(2):
        grp.refine_list(poly_order=2, mag_limits=[16, 24], max_coeff=5, ds9=ds9, verbose=True)
        
                               
    
    
